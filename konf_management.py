import tkinter as tk
import os
import argparse

class CommandLineEmulator(tk.Tk):
    def __init__(self, script_path=None):
        super().__init__()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫–Ω–∞
        self.title("VFS")
        self.wm_attributes("-fullscreen", True)  # –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
        self.output = tk.Text(self, bg="#000000", fg="white", insertbackground="white", font=("Arial", 18))
        self.output.pack(fill=tk.BOTH, expand=True)
        self.output.config(state="disabled")  # –°–¥–µ–ª–∞–µ–º –ø–æ–ª–µ –≤—ã–≤–æ–¥–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º
    
        # –í–∏–¥–∂–µ—Ç –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥
        input_frame = tk.Frame(self)
        input_frame.pack(side=tk.BOTTOM, fill=tk.X)
        self.input_field = tk.Entry(input_frame, bg="#000000", fg="white", insertbackground="white", font=("Courier New", 20))
        self.input_field.pack(side=tk.LEFT, fill=tk.X, expand=True, ipady=10)
        self.input_field.bind("<Return>", lambda event: self.execute_command())

        # –°—Ç–∞–≤–∏–º —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        self.input_field.focus_set()

        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã
        submit_button = tk.Button(input_frame, text="–í—ã–ø–æ–ª–Ω–∏—Ç—å", font=("Arial", 15), height=2, width=15, bg="#5c5c5c", fg="white", 
                                  activebackground="#7b7b7b", relief=tk.RAISED, borderwidth=25, command=self.execute_command)
        submit_button.pack(side=tk.RIGHT)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
        self.commands = {
            'ls': self.ls,
            'cd': self.cd,
            'exit': self.exit,
            'echo': self.echo
        }
        self.current_dir = os.getcwd()
        
        # –ó–∞–ø—É—Å–∫ —ç–º—É–ª—è—Ç–æ—Ä–∞
        if script_path:
            self.run_script(script_path)
        else:
            self.display_output(f"{self.current_dir}~> ")

    def run_script(self, script_path):
        with open(script_path, 'r') as file:
            lines = file.readlines()
            print(lines)
            print(script_path)
            for line in lines:
                line = line.strip()
                if line.startswith('#'):
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                if line:
                    self.execute_command(line)

    def execute_command(self, command=None):
        if command is None:
            command = self.input_field.get()
            self.input_field.delete(0, tk.END)
        if not command.strip():
            return
    
        try:
            cmd_parts = command.split()
            cmd = cmd_parts[0]
            args = cmd_parts[1:]
            
            output = f"{self.current_dir}~üí≤ {command}\n"
            self.display_output(output)
            if cmd in self.commands:
                self.commands[cmd](args)
            else:
                output = f"–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ '{cmd}'ü§î\n"
                self.display_output(output)

                
            
        except Exception as e:
            self.display_output(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}üòí")
    
    def ls(self, args):
        output = f"{' '.join(args)}\n"
        self.display_output(output)
        
    def cd(self, args):
        output = f"{' '.join(args)}\n"
        self.display_output(output)

    def exit(self, args):
        self.destroy()

    def echo(self, args):
        self.display_output(" ".join(args))

    def display_output(self, message):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±–ª–∞—Å—Ç–∏ –≤—ã–≤–æ–¥–∞"""
        self.output.config(state='normal')
        self.output.insert('end', message + "\n")
        self.output.see('end')  # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
        self.output.config(state='disabled')

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Command Line Emulator")
    parser.add_argument("--script", help="Path to the script file to run")
    args = parser.parse_args()

    app = CommandLineEmulator(script_path=args.script)
    app.mainloop()